#!/bin/bash

# For help customizing this script, read:
# http://tiny/a6md3511/Third-Party_custom-build

# Fail when commands exit unsuccesfully.
set -o errexit

# Fail when using an undefined variable.
set -o nounset

# Fail if commands fail as part of a pipeline.
set -o pipefail

echo "Discovering build and source directory..."
ROOT_DIR="$(findup Config)"
BUILD_DIR="$ROOT_DIR/build"
INSTALL_DIR="$BUILD_DIR/private/install"
WRITABLE_SRC_DIR="$BUILD_DIR/private/src"
THIRD_PARTY_SRC_DIR="$ROOT_DIR/third-party-src"

# Add a 'clean' target for convenience.
if [[ $# > 0 ]]; then
  if [[ "$1" == "clean" ]]; then
    echo "Cleaning build output..."
    rm -rf "$BUILD_DIR"/*
    exit 0
  fi
fi

echo "Getting configuration values from Brazil using cflags..."
eval "$(cflags -format sh)"

echo "Getting dependency information from Brazil using brazil-path..."
LIBFARM="$(brazil-path build.libfarm)"
export CFLAGS="$CFLAGS -I$LIBFARM/include"
export CXXFLAGS="$CXXFLAGS -I$LIBFARM/include"
export LDFLAGS="$LDFLAGS -L$LIBFARM/lib"
# This lets us find *-config scripts in packages that don't use standard
# pkg-config instead.
export PATH="$LIBFARM/bin:$PATH"

echo "Copying source code into writable location..."
mkdir -p "$WRITABLE_SRC_DIR"
cp -rufp "$THIRD_PARTY_SRC_DIR"/. "$WRITABLE_SRC_DIR"

echo "Running third-party build..."
mkdir -p "$INSTALL_DIR"
cd "$WRITABLE_SRC_DIR"
./configure "--prefix=$INSTALL_DIR"
make
make install

echo "Stripping rpaths..."
BIN_DIR="$INSTALL_DIR/bin"
LIB_DIR="$INSTALL_DIR/lib"
for file in $(find -H "$BIN_DIR" "$LIB_DIR" | sort)
do
  if [[ "$(chrpath -l $file 2> /dev/null)" =~ RPATH= ]]; then
    echo "Stripping rpath from $file..."
    chrpath -d "$file"
  fi
done

echo "Copying install artifacts to Brazil locations..."
cp -rf "$INSTALL_DIR"/* "$BUILD_DIR"
# vim: set ft=sh ts=2 sw=2 tw=79 :
